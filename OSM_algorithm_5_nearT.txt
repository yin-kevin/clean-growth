--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

/* 
AUTHOR: Kevin Yin
DATE: Oct. 6, 2021

This file contains PostgreSQL code to clean and abstract power line and station data from 
OpenStreetMap that has already been filtered using Osmosis and exported to a PostgreSQL database. 
Inside the database should be the 'planet_osm_line', 'planet_osm_polygon', 'planet_osm_point tables' 
for the following queries to run. The outputs are the 'links', 'vertices' and 'intersections' .csv tables, which
describe power lines, stations, and their intersections respectively.
*/

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 15: Identify and clean NEAR T-intersections
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Querying all 'near' t-intersections occuring outside of stations
CREATE TABLE near_t_intersections AS 
-- SEI stands for 'station endpoint indicators', SEI = 1 if the endpoint touches a station
WITH cte_power_lines_SEI AS
	(
	SELECT L.line_id,
		   L.power,
		   L.cables,
		   L.voltage,
		   L.wires,
		   L.way,
		   CASE
				WHEN ST_Intersects(ST_StartPoint(L.way), S.all_stations)
				THEN 1
				ELSE 0
		   END AS station_startpoint,
		   CASE
				WHEN ST_Intersects(ST_EndPoint(L.way), S.all_stations)
				THEN 1
				ELSE 0
		   END AS station_endpoint
	FROM power_lines L, (SELECT ST_Union(way) AS all_stations FROM power_stations) AS S
	)
-- Use the CTE to query T-intersections, where the endpoint-line is not at a station
SELECT ROW_NUMBER() OVER() AS intersection_id,
	   X.line_id AS x_id, 
	   X.power AS x_power,
	   X.cables AS x_cables,
	   X.voltage AS x_voltage,
	   X.wires AS x_wires,
	   X.way AS x_way,
	   Y.line_id AS y_id,
	   Y.power AS y_power,
	   Y.cables AS y_cables, 
	   Y.voltage AS y_voltage,
	   Y.wires AS y_wires,
	   Y.way AS y_way,
	   CASE
	 	  WHEN ST_Distance(ST_StartPoint(X.way), Y.way) < 0.0045045
		  THEN 0
		  WHEN ST_Distance(ST_EndPoint(X.way), Y.way) < 0.0045045
		  THEN -1
	   END AS x_line_start_or_end
FROM cte_power_lines_SEI X, cte_power_lines_SEI Y
WHERE X.line_id != Y.line_id
-- Condition: 'near' but not intersecting
AND NOT ST_Intersects(X.way, Y.way)
-- Condition: Endpoint of Line X is not close to endpoint of Line Y
-- This condition rules out lines that are later to be merged
AND NOT (
		ST_Distance(ST_EndPoint(X.way), ST_EndPoint(Y.way)) < 0.0045045
	 	OR ST_Distance(ST_StartPoint(X.way), ST_StartPoint(Y.way)) < 0.0045045
	 	OR ST_Distance(ST_EndPoint(X.way), ST_StartPoint(Y.way)) < 0.0045045
	 	OR ST_Distance(ST_StartPoint(X.way), ST_EndPoint(Y.way)) < 0.0045045
		)
-- Condition: Endpoint of Line X is close to Line Y (outside of endpoints)
-- Condition: Endpoint of Line X is not at a station
AND (
		(ST_Distance(ST_StartPoint(X.way), Y.way) < 0.0045045
		AND X.station_startpoint = 0)
 	OR  (ST_Distance(ST_EndPoint(X.way), Y.way) < 0.0045045
		AND X.station_endpoint = 0)
	);


-- SUB-STEP: For X-lines that are close to more than one line at the same endpoint, choose the closest Y-line
-- Create a table of intersection_ids and corresponding distances from X to Y
-- Select only those intersection_ids NOT corresponding to minimum distance for the same X
-- Remove all those intersections_ids from near_t_intersections_near so we're left with only the closest ones
CREATE TABLE intersections_to_remove AS
SELECT intersection_id,
	   x_id,
	   CASE
			WHEN x_line_start_or_end = 0
			THEN ST_Distance(ST_StartPoint(x_way), y_way)
			WHEN x_line_start_or_end = -1
			THEN ST_Distance(ST_EndPoint(x_way), y_way)
	   END AS distance_to_y
FROM near_t_intersections
-- Condition: Only consider duplicated x-IDs to reduce the number of distance calculations
WHERE x_id IN
	(
	SELECT x_id FROM
		(
		SELECT x_id, x_line_start_or_end 
		FROM near_t_intersections
		GROUP BY x_id, x_line_start_or_end HAVING COUNT(*) > 1
		) AS duplicate_x_ids
	);

-- Remove the miminum distance T-intersections (the ones we ultimately want to keep) from intersections_to_remove
DELETE FROM intersections_to_remove
WHERE distance_to_y IN 
	(
	SELECT min_dist FROM 
		(
		SELECT x_id, 
			   MIN(distance_to_y) AS min_dist 
		FROM intersections_to_remove 
		GROUP BY x_id
		) AS minimum_distances
	);

-- Remove the intersections_to_remove from near_t_intersections
DELETE FROM near_t_intersections
WHERE intersection_id IN 
	(
	SELECT intersection_id 
	FROM intersections_to_remove
	);


-- SUB-STEP: Remove duplicate mirrored pair intersections ([x,y] = [y,x]), whichever intersection is further
-- Identify mirrored_pairs and calculated distance_to_y
CREATE TABLE mirrored_pairs AS
SELECT X.intersection_id,
	   X.x_id, 
	   X.y_id,
	   CASE
			WHEN X.x_line_start_or_end = 0
			THEN ST_Distance(ST_StartPoint(X.x_way), X.y_way)
			WHEN X.x_line_start_or_end = -1
			THEN ST_Distance(ST_EndPoint(X.x_way), X.y_way)
	   END AS distance_to_y,
	   -- Order the IDs in the mirrored pair so the larger ID comes first, for GROUP BY later
	   CASE
			WHEN X.y_id > Y.y_id
			THEN X.y_id 
			ELSE Y.y_id
	   END AS big_id,
	   CASE
			WHEN X.y_id > Y.y_id
			THEN Y.y_id 
			ELSE X.y_id
	   END AS small_id
FROM near_t_intersections X
INNER JOIN near_t_intersections Y ON X.x_id = Y.y_id AND X.y_id = Y.x_id;

-- Remove the further intersection from near_t_intersections
DELETE FROM near_t_intersections
WHERE intersection_id IN 
	(
	SELECT intersection_id 
	FROM mirrored_pairs
	WHERE distance_to_y NOT IN
		(
		SELECT MIN(distance_to_y) 
		FROM mirrored_pairs 
		GROUP BY big_id, small_id
		)
	);

-- Dropping temp tables
DROP TABLE intersections_to_remove;
DROP TABLE mirrored_pairs;


--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 16: Replace X-line endpoints of near T-intersections
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Remove power lines that are about to be updated
DELETE FROM power_lines
WHERE power_lines.line_id IN 
	(SELECT x_id 
	 FROM near_t_intersections
	 WHERE x_line_start_or_end = 0);

-- For t-intersections where X is close to Y at a startpoint, replace X's startpoint
-- Insert X into power_lines
INSERT INTO power_lines (
	   		line_id,
			power, 
	   		cables, 
	   		voltage, 
	   		wires, 
			way )
SELECT x_id AS line_id,
	   x_power AS power,
	   x_cables AS cables,
	   x_voltage AS voltage,
	   x_wires AS wires,
	   ST_SetPoint(x_way, 0, ST_ClosestPoint(y_way, ST_StartPoint(x_way))) AS way
FROM near_t_intersections
WHERE x_line_start_or_end = 0;

-- Create a table of Xs with replaced END-points from power_lines
-- Since START-points were already replaced, this accounts for those lines that need both replaced
CREATE TABLE lines_with_replaced_endpoints AS
SELECT L.line_id, 
	   L.power, 
	   L.cables, 
	   L.voltage, 
	   L.wires, 
	   ST_SetPoint(L.way, -1, ST_ClosestPoint(y_way, ST_EndPoint(x_way))) AS way
FROM power_lines L, near_t_intersections I
WHERE L.line_id = I.x_id
AND I.x_line_start_or_end = -1;

-- Remove power lines that are about to be updated
DELETE FROM power_lines
WHERE power_lines.line_id IN 
	(SELECT x_id 
	 FROM near_t_intersections 
	 WHERE x_line_start_or_end = -1);

-- For t-intersections where X is close to Y at a endpoint, replace X's endpoint
-- Insert X into power_lines
-- This accounts for those X's where startpoints also needed replacing (because they were replaced already and inserted)
INSERT INTO power_lines (
	   		line_id,
			power, 
	   		cables, 
	   		voltage, 
	   		wires, 
			way )
SELECT * FROM lines_with_replaced_endpoints;

-- Create a new ID column for each intersection with first digit 1 (t) or 2 (near-t)
ALTER TABLE t_intersections
ADD COLUMN new_int_id int;
ALTER TABLE near_t_intersections
ADD COLUMN new_int_id int;

-- Fill those columns with the new ID numbers
UPDATE t_intersections
SET new_int_id = CAST(CONCAT('1', intersection_id) AS int);
UPDATE near_t_intersections
SET new_int_id = CAST(CONCAT('2', intersection_id) AS int);

-- Change the name of the column to 'intersection_id'
ALTER TABLE t_intersections
DROP COLUMN intersection_id;
ALTER TABLE near_t_intersections
DROP COLUMN intersection_id;
ALTER TABLE t_intersections
RENAME new_int_id TO intersection_id;
ALTER TABLE near_t_intersections
RENAME new_int_id TO intersection_id;

-- Dropping temp tables
DROP TABLE lines_with_replaced_endpoints;


--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 17: Create auxiliary nodes and splitting Y-lines by them
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Creating auxiliary nodes and inserting them into the power_stations table
CREATE TABLE auxiliary_stations AS
SELECT ROW_NUMBER() OVER() AS station_id, *
FROM 
	(
	SELECT 'auxiliary' AS power,
		   null AS voltage,
		   ST_Buffer(ST_ClosestPoint(y_way, x_way), 0.001) AS station,
		   intersection_id
	FROM t_intersections
	UNION
	SELECT 'auxiliary' AS power,
		   null AS voltage,
		   ST_Buffer(ST_ClosestPoint(y_way, x_way), 0.001) AS station,
		   intersection_id
	FROM near_t_intersections
	) AS intersections;


-- Creating table of convex hulls of clustered AUXILIARY stations
CREATE TABLE temp_table AS
SELECT ROW_NUMBER() OVER() AS station_id,
	   STRING_AGG(power, ',') AS power, 
	   STRING_AGG(voltage, ',') AS voltage,
	   way
FROM auxiliary_stations, 
		 (
			 SELECT ST_ConvexHull((ST_Dump(ST_Union(station))).geom) as way FROM auxiliary_stations 
		 ) AS unioned_stations
WHERE ST_Contains(way, station)
GROUP BY way;

-- Use replace the old 'auxiliary_stations' table with the clustered one
DROP TABLE auxiliary_stations;
CREATE TABLE auxiliary_stations AS
SELECT * FROM temp_table;

-- Dropping temp_tables
DROP TABLE temp_table;



-- Create table of auxiliary intersections to loop through
CREATE TABLE auxiliary_intersections AS
SELECT ROW_NUMBER() OVER() AS intersect_id,
	   L.way AS line,
	   L.line_id, 
	   S.station_id,
	   ST_Intersection(L.way, S.way) AS intersection, 
	   S.way AS station,
	   CASE
	       	WHEN ST_Intersects(ST_Buffer(ST_Endpoint(L.way), 0.0005), S.way) OR 
		   		 ST_Intersects(ST_Buffer(ST_Startpoint(L.way), 0.0005), S.way)
	   		THEN 1
	   		ELSE 0
	   END AS endpoint
FROM power_lines L, auxiliary_stations S
WHERE ST_Intersects(L.way, S.way);


-- Put auxiliary stations in the power_stations table
INSERT INTO power_stations (
							station_id,
							power,
							voltage,
							way
)
SELECT station_id,
	   power,
	   voltage,
	   way
FROM auxiliary_stations;


-- Create new power_lines table of updated line_ids
CREATE TABLE power_stations_updated AS
SELECT ROW_NUMBER() OVER() AS new_station_id, * FROM power_stations;
	
-- Dropping old power_lines table, renaming tables and columns
DROP TABLE power_stations;
	
ALTER TABLE power_stations_updated
DROP COLUMN station_id;

ALTER TABLE power_stations_updated
RENAME TO power_stations;

ALTER TABLE power_stations
RENAME new_station_id TO station_id;


-- Splitting loop
DO $$
DECLARE
   counter integer := 0;
BEGIN
	WHILE EXISTS(SELECT 1 FROM auxiliary_intersections WHERE endpoint = 0) LOOP 
 
	-- Consider only a subset of the original set of intersections where endpoint = 0
	CREATE TABLE subset_intersections_recalc AS
	SELECT DISTINCT ON(line_id) * FROM auxiliary_intersections WHERE endpoint = 0;

	-- Denote endpoint = 1 in 'intersections' if that intersection is being dealt with in this iteration
	UPDATE auxiliary_intersections
	SET endpoint = 1 WHERE intersect_id IN 
	(SELECT intersect_id FROM subset_intersections_recalc);
	
	-- FIXME: doesn't select the same ints 
	-- Using the stations in the subset, recalculate which new line IDs they intersect
	IF counter > 0 THEN
		CREATE TABLE subset_intersections AS
		SELECT * FROM subset_intersections_recalc;

		DROP TABLE subset_intersections_recalc;

		CREATE TABLE subset_intersections_recalc AS
		SELECT L.line_id, 
			   L.way AS line,
			   I.station_id,
			   I.station,
			   ST_Intersection(L.way, I.station)
		FROM power_lines L, subset_intersections I
		WHERE ST_Intersects(L.way, I.station)
		AND NOT ST_Intersects(ST_Endpoint(L.way), I.station)
		AND NOT ST_Intersects(ST_Startpoint(L.way), I.station);
		
		DROP TABLE subset_intersections;
	END IF;
  
	-- Create a column called 'station_update' in the lines table to store the station information
	ALTER TABLE power_lines
	ADD station_update geometry;
  
	-- Set the 'station_update' to the corresponding station in subset_intersections
	UPDATE power_lines
	SET station_update = subset_intersections_recalc.station
  	FROM subset_intersections_recalc
	WHERE power_lines.line_id = subset_intersections_recalc.line_id;

	-- Create a table for split_lines 
  	CREATE TABLE split_lines AS
 	SELECT L.line_id, 
	   	   L.power, 
	   	   L.cables, 
	   	   L.voltage, 
	   	   L.wires, 
	   	   (ST_Dump( ST_Difference(way, station_update) )).geom as way, 
		   L.station_update
  	FROM power_lines L
  	WHERE station_update IS NOT NULL;
	
	-- Replace the endpoints of lines with station centroids
	CREATE TABLE split_lines_with_new_endpoints AS
	SELECT line_id, 
	   	  power, 
		  cables, 
		  voltage, 
		  wires, 
		  station_update,
		  CASE
			  WHEN ST_Distance( ST_EndPoint(way), ST_Centroid(station_update) ) < 
		 	 	   ST_Distance( ST_StartPoint(way), ST_Centroid(station_update) )
			  THEN ST_SetPoint(way, -1, ST_Centroid(station_update))
			  WHEN ST_Distance( ST_EndPoint(way), ST_Centroid(station_update) ) > 
		  	 	   ST_Distance( ST_StartPoint(way), ST_Centroid(station_update) )
			  THEN ST_SetPoint(way, 0, ST_Centroid(station_update))
		  END AS way
	FROM split_lines;
	
	-- Remove double counted lines 
    DELETE FROM power_lines
    WHERE power_lines.line_id IN (SELECT line_id FROM split_lines);
   
	-- Insert new lines into power_lines
	INSERT INTO power_lines (
	   			line_id, 
	   			power, 
	   			cables, 
	   			voltage, 
	   			wires, 
	   			station_update,
				way )
	SELECT * FROM split_lines_with_new_endpoints;
	
	-- Create new power_lines table of updated line_ids
	CREATE TABLE power_lines_updated AS
	SELECT ROW_NUMBER() OVER() AS new_line_id, * FROM power_lines;
	
	-- Dropping old power_lines table, renaming tables and columns
	DROP TABLE power_lines;
	
	ALTER TABLE power_lines_updated
	RENAME TO power_lines;
	
	ALTER TABLE power_lines
	DROP COLUMN line_id;
	
	ALTER TABLE power_lines
	RENAME new_line_id TO line_id;
	
	ALTER TABLE power_lines
	DROP COLUMN IF EXISTS station_update;
	
	-- Drop intermediary tables
	DROP TABLE subset_intersections_recalc;
	DROP TABLE split_lines;
	DROP TABLE split_lines_with_new_endpoints;
    RAISE NOTICE 'Iterations %', counter;
    counter := counter + 1;
    
	END LOOP;
END$$;	

-- Drop temp tables
DROP TABLE t_intersections;
DROP TABLE near_t_intersections;
DROP TABLE auxiliary_intersections;
DROP TABLE auxiliary_stations;


--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 18: Merge lines that are close but not connected (near intersections)
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Query intersections
CREATE TABLE line2line_near_intersections AS
-- Identify all lines that are near each other
SELECT DISTINCT X.line_id AS x_id, 
				X.power AS x_power,
				X.cables AS x_cables,
				X.voltage AS x_voltage,
				X.wires AS x_wires,
				X.way AS x_way,
			    Y.line_id AS y_id,
				Y.power AS y_power,
				Y.cables AS y_cables,
				Y.voltage AS y_voltage,
				Y.wires AS y_wires,
				Y.way AS y_way,
				-- Create connecting segments between nearby lines
				CASE
					WHEN ST_Distance(ST_EndPoint(X.way), ST_EndPoint(Y.way)) < 0.0045045
					THEN ST_MakeLine(ST_EndPoint(X.way), ST_EndPoint(Y.way))
					WHEN ST_Distance(ST_StartPoint(X.way), ST_StartPoint(Y.way)) < 0.0045045
					THEN ST_MakeLine(ST_StartPoint(X.way), ST_StartPoint(Y.way))
					WHEN ST_Distance(ST_EndPoint(X.way), ST_StartPoint(Y.way)) < 0.0045045
					THEN ST_MakeLine(ST_EndPoint(X.way), ST_StartPoint(Y.way))
					WHEN ST_Distance(ST_StartPoint(X.way), ST_EndPoint(Y.way)) < 0.0045045
					THEN ST_MakeLine(ST_StartPoint(X.way), ST_EndPoint(Y.way))
				END AS z_way
FROM power_lines X, 
	 power_lines Y, 
	 (SELECT ST_Union(way) AS all_stations FROM power_stations) AS S,
	 bounding_box B
WHERE X.line_id != Y.line_id
AND X.line_id > Y.line_id
AND NOT ST_Intersects(X.way, Y.way) 
-- Condition: Lines must not be parallel (or where one line is just too short)
-- 'Parallel' in this case means both endpoints are close to the other line
AND NOT (
			(ST_Distance(ST_EndPoint(X.way), ST_EndPoint(Y.way)) < 0.0045045
			AND (ST_Distance(ST_StartPoint(X.way), Y.way) < 0.0045045
				OR ST_Distance(ST_StartPoint(Y.way), X.way) < 0.0045045))
		OR  (ST_Distance(ST_StartPoint(X.way), ST_StartPoint(Y.way)) < 0.0045045
			 AND (ST_Distance(ST_EndPoint(X.way), Y.way) < 0.0045045
				OR ST_Distance(ST_EndPoint(Y.way), X.way) < 0.0045045))
		OR  (ST_Distance(ST_EndPoint(X.way), ST_StartPoint(Y.way)) < 0.0045045 
			 AND (ST_Distance(ST_StartPoint(X.way), Y.way) < 0.0045045
				OR ST_Distance(ST_EndPoint(Y.way), X.way) < 0.0045045))
		OR  (ST_Distance(ST_StartPoint(X.way), ST_EndPoint(Y.way)) < 0.0045045
			AND (ST_Distance(ST_EndPoint(X.way), Y.way) < 0.0045045
				OR ST_Distance(ST_StartPoint(Y.way), X.way) < 0.0045045))
		)
-- Condition: Line endpoints must be within 500m of each other and within the bounding box
AND (
	(ST_Distance(ST_EndPoint(X.way), ST_EndPoint(Y.way)) < 0.0045045 
	 AND ST_Intersects(ST_EndPoint(X.way), B.polygon))
	OR 
	(ST_Distance(ST_StartPoint(X.way), ST_StartPoint(Y.way)) < 0.0045045 
	 AND ST_Intersects(ST_StartPoint(X.way), B.polygon))
	OR 
	(ST_Distance(ST_EndPoint(X.way), ST_StartPoint(Y.way)) < 0.0045045 
	 AND ST_Intersects(ST_EndPoint(X.way), B.polygon))
	OR 
	(ST_Distance(ST_StartPoint(X.way), ST_EndPoint(Y.way)) < 0.0045045 
	 AND ST_Intersects(ST_StartPoint(X.way), B.polygon))
	);				


-- Get rid of leftover intersections that occur at stations (ST_Intersects misses some)
DELETE FROM line2line_near_intersections
WHERE ST_Covers(
			   (SELECT ST_Union(way) AS all_stations FROM power_stations), 
			   z_way
			   );


-- Get rid of z-intersections that occur at stations (z is the connecting line)
DELETE FROM line2line_near_intersections
WHERE ST_Covers(
			   (SELECT ST_Union(way) AS all_stations FROM power_stations), 
			   st_intersection(x_way, z_way)
			   )
OR ST_Covers(
			   (SELECT ST_Union(way) AS all_stations FROM power_stations), 
			   st_intersection(y_way, z_way)
			   );


-- Create power, cables, voltage and wires columns for the connecting lines
ALTER TABLE line2line_near_intersections
ADD COLUMN z_power text,
ADD COLUMN z_cables text,
ADD COLUMN z_voltage text,
ADD COLUMN z_wires text;


-- 
CREATE TABLE line_groups AS 
-- START of CTE
WITH RECURSIVE cte_line_intersections AS
	(
	SELECT x_id, 
		   x_power,
		   x_cables,
		   x_voltage,
		   x_wires,
		   x_way,
		   z_power,
		   z_cables,
		   z_voltage,
		   z_wires,
		   z_way,
		   y_id, 
		   y_power,
		   y_cables,
		   y_voltage,
		   y_wires,
		   y_way,
		   1 AS level
	FROM line2line_near_intersections I
	UNION ALL
		SELECT I.x_id, 
			   I.x_power,
			   I.x_cables,
			   I.x_voltage,
			   I.x_wires,
			   I.x_way,
			   I.z_power,
			   I.z_cables,
			   I.z_voltage,
			   I.z_wires,
			   I.z_way,
			   cte_line_intersections.y_id, 
			   cte_line_intersections.y_power,
			   cte_line_intersections.y_cables,
			   cte_line_intersections.y_voltage,
			   cte_line_intersections.y_wires,
			   cte_line_intersections.y_way, 
			   cte_line_intersections.level + 1
		FROM line2line_near_intersections I 
		JOIN cte_line_intersections ON I.y_id = cte_line_intersections.x_id
	)
-- END of CTE
SELECT x_id, 
	   x_power,
	   x_cables,
	   x_voltage,
	   x_wires,
	   x_way,
	   z_power,
	   z_cables,
	   z_voltage,
	   z_wires,
	   z_way,
	   y_id,
	   y_power,
	   y_cables,
	   y_voltage,
	   y_wires,
	   y_way,
       DENSE_RANK() OVER(ORDER BY merge_number) AS group_number
FROM (SELECT x_id, 
	  		 x_power,
	   		 x_cables,
	   		 x_voltage,
	   		 x_wires,
	   		 x_way,
	  		 z_power,
	   		 z_cables,
	   		 z_voltage,
	   		 z_wires,
	   		 z_way,
	  		 y_id,
	 		 y_power,
	   		 y_cables,
	   		 y_voltage,
	   		 y_wires,
	   		 y_way,
             LEAST(MIN(y_id) OVER(PARTITION BY x_id), MIN(x_id) OVER(PARTITION BY y_id)) AS merge_number,
             level
      FROM cte_line_intersections
     ) line2line_near_intersections
WHERE level = 1;

-- Remove the merged lines from power_lines by ID
DELETE FROM power_lines
WHERE power_lines.line_id IN (SELECT x_id FROM line2line_near_intersections)
OR power_lines.line_id IN (SELECT y_id FROM line2line_near_intersections);

-- Remove line_id column
ALTER TABLE power_lines
DROP COLUMN line_id;

-- Insert new lines into power_lines
INSERT INTO power_lines (
	   		power, 
	   		cables, 
	   		voltage, 
	   		wires, 
			way )
SELECT * FROM 
	(
	 SELECT STRING_AGG(power, ',') AS power,
	       	STRING_AGG(cables, ',') AS cables,
	        STRING_AGG(voltage, ',') AS voltage,
	        STRING_AGG(wires, ',') AS wires,
	        ST_LineMerge(ST_Union(way)) AS way
	 FROM (
			SELECT DISTINCT x_power AS power,
	   		 				x_cables AS cables,
	   		 				x_voltage AS voltage,
	   		 				x_wires AS wires,
							x_way AS way,
							group_number
		    FROM line_groups
		 	UNION
			SELECT DISTINCT z_power AS power,
	   		 				z_cables AS cables,
	   		 				z_voltage AS voltage,
	   		 				z_wires AS wires,
							z_way AS way,
							group_number
			FROM line_groups
		 	UNION
			SELECT DISTINCT y_power AS power,
	   		 				y_cables AS cables,
	   		 				y_voltage AS voltage,
	   		 				y_wires AS wires,
							y_way AS way,
							group_number
			FROM line_groups
		  ) AS line_groups_reshape
	 GROUP BY group_number
	) AS merged_lines;

-- Create new power_lines table of updated line_ids
CREATE TABLE power_lines_updated AS
SELECT ROW_NUMBER() OVER() AS new_line_id, * FROM power_lines;
	
-- Dropping old power_lines table, renaming tables and columns
DROP TABLE power_lines;
	
ALTER TABLE power_lines_updated
RENAME TO power_lines;
	
ALTER TABLE power_lines
RENAME new_line_id TO line_id;

-- Dropping temp tables
DROP TABLE line2line_near_intersections;
DROP TABLE line_groups;




