--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

/* 
AUTHOR: Kevin Yin
DATE: Oct. 6, 2021

This file contains PostgreSQL code to clean and abstract power line and station data from 
OpenStreetMap that has already been filtered using Osmosis and exported to a PostgreSQL database. 
Inside the database should be the 'planet_osm_line', 'planet_osm_polygon', 'planet_osm_point tables' 
for the following queries to run. The outputs are the 'links', 'vertices' and 'intersections' .csv tables, which
describe power lines, stations, and their intersections respectively.
*/

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 4: Cluster stations within 500m and use the convex hull of each cluster as the station
*/
--------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------

-- Creating table of convex hulls of clustered stations
CREATE TABLE temp_table AS
-- Collect unions of stations that intersect each other (so that the resulting geoms are valid)
WITH cte_unioned_stations AS 
	(
	SELECT STRING_AGG(power, ',') AS power, 
		   STRING_AGG(voltage, ',') AS voltage,
		   station_union
	FROM power_stations, 
		 (
			 SELECT (ST_Dump(ST_Union(way))).geom as station_union FROM power_stations 
		 ) AS unioned_stations
	WHERE ST_Contains(station_union, way)
	GROUP BY station_union
	)
-- Cluster stations within 500m of each other
SELECT ROW_NUMBER() OVER() AS station_id, 
	   power,
	   voltage,
	   station_cluster as way
FROM
(
SELECT STRING_AGG(power, ',') AS power,
	   STRING_AGG(voltage, ',') AS voltage,
	   station_cluster
FROM cte_unioned_stations,
	 (
		SELECT ST_ConvexHull(UNNEST(ST_ClusterWithin(station_union, 0.009090))) AS station_cluster FROM cte_unioned_stations
	 ) AS clustered_stations
WHERE ST_Contains(ST_CollectionExtract(station_cluster, 3), station_union)
GROUP BY station_cluster
) AS clustered_stations_with_labels;

-- Use replace the old 'power_stations' table with the clustered one
DROP TABLE power_stations;
CREATE TABLE power_stations AS
SELECT * FROM temp_table;

-- Dropping temp_tables
DROP TABLE temp_table;

-- Saving initial power_lines 
CREATE TABLE power_lines_init AS 
SELECT * FROM power_lines;
CREATE TABLE power_stations_init AS 
SELECT * FROM power_stations;


--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 5: Replacing endpoints of lines with station centroids where necessary (intersections)
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Create temp table where lines have START-points replaced with station centroid (where they intersect)
CREATE TABLE temp_table AS
SELECT L.line_id,
       L.power,
	   L.cables,
	   L.voltage, 
	   L.wires,
	   ST_SetPoint(L.way, 0, ST_Centroid(S.way)) as way
FROM power_lines L, power_stations S
WHERE ST_Intersects(ST_StartPoint(L.way), S.way);

-- Remove the corresponding original lines from power_lines
DELETE FROM power_lines
WHERE power_lines.line_id IN (SELECT line_id FROM temp_table);

-- Insert updated lines from temp table
INSERT INTO power_lines (
	   					line_id, 
	   					power, 
	   					cables, 
	   					voltage, 
	   					wires, 
						way )
SELECT * FROM temp_table;

DROP TABLE temp_table;

-- Create temp table where lines have END-points replaced with station centroid (where they intersect)
CREATE TABLE temp_table AS
SELECT L.line_id,
       L.power,
	   L.cables,
	   L.voltage, 
	   L.wires,
	   ST_SetPoint(L.way, -1, ST_Centroid(S.way)) as way
FROM power_lines L, power_stations S
WHERE ST_Intersects(ST_EndPoint(L.way), S.way);

-- Remove the corresponding original lines from power_lines
DELETE FROM power_lines
WHERE power_lines.line_id IN (SELECT line_id FROM temp_table);

-- Insert updated lines from temp table
INSERT INTO power_lines (
	   					line_id, 
	   					power, 
	   					cables, 
	   					voltage, 
	   					wires, 
						way )
SELECT * FROM temp_table;

-- Dropping temp tables
DROP TABLE temp_table;



--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 6: Identifying line-station intersections (and whether they occur at endpoints)
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Find intersections, line IDs, and corresponding station geometries
CREATE TABLE intersections AS
SELECT ROW_NUMBER() OVER() AS intersect_id,
	   L.way AS line,
	   L.line_id, 
	   S.station_id,
	   ST_Intersection(L.way, S.way) AS intersection, 
	   S.way AS station,
	   CASE
	       	WHEN ST_Intersects(ST_Buffer(ST_Endpoint(L.way), 0.0005), S.way) OR 
		   		 ST_Intersects(ST_Buffer(ST_Startpoint(L.way), 0.0005), S.way)
	   		THEN 1
	   		ELSE 0
	   END AS endpoint
FROM power_lines L, power_stations S
WHERE ST_Intersects(L.way, S.way);



--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 7: Splitting lines by intersections
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Splitting loop
DO $$
DECLARE
   counter integer := 0;
BEGIN
	WHILE EXISTS(SELECT 1 FROM intersections WHERE endpoint = 0) LOOP 
 
	-- Consider only a subset of the original set of intersections where endpoint = 0
	CREATE TABLE subset_intersections_recalc AS
	SELECT DISTINCT ON(line_id) * FROM intersections WHERE endpoint = 0;

	-- Denote endpoint = 1 in 'intersections' if that intersection is being dealt with in this iteration
	UPDATE intersections
	SET endpoint = 1 WHERE intersect_id IN 
	(SELECT intersect_id FROM subset_intersections_recalc);
	
	-- Using the stations in the subset, recalculate which new line IDs they intersect
	-- The 'endpoint=0' condition of subset_intersections implies that INTERSECTIONS already dealt with won't be considered
	-- The NOT ST_Intersects condition implies that FOR A GIVEN STATION, LINES already dealt with won't be considered
	IF counter > 0 THEN
		CREATE TABLE subset_intersections AS
		SELECT * FROM subset_intersections_recalc;

		DROP TABLE subset_intersections_recalc;

		CREATE TABLE subset_intersections_recalc AS
		SELECT L.line_id, 
			   L.way AS line,
			   I.station_id,
			   I.station
		FROM power_lines L, subset_intersections I
		WHERE ST_Intersects(L.way, I.station) 
		AND NOT ST_Intersects(ST_Buffer(ST_Endpoint(L.way), 0.00005), I.station)
		AND NOT ST_Intersects(ST_Buffer(ST_Startpoint(L.way), 0.00005), I.station);
		
		DROP TABLE subset_intersections;
	END IF;

	-- Create a column called 'station_update' in the lines table to store the station information
	ALTER TABLE power_lines
	ADD station_update geometry;
  
	-- Set the 'station_update' to the corresponding station in subset_intersections
	UPDATE power_lines
	SET station_update = subset_intersections_recalc.station
  	FROM subset_intersections_recalc
	WHERE power_lines.line_id = subset_intersections_recalc.line_id;

	-- Create a table for split_lines 
  	CREATE TABLE split_lines AS
 	SELECT L.line_id, 
	   	   L.power, 
	   	   L.cables, 
	   	   L.voltage, 
	   	   L.wires, 
	   	   (ST_Dump( ST_Difference(way, station_update) )).geom as way, 
		   L.station_update
  	FROM power_lines L
  	WHERE station_update IS NOT NULL;
	
	-- Replace the endpoints of lines with station centroids
	CREATE TABLE split_lines_with_new_endpoints AS
	SELECT line_id, 
	   	  power, 
		  cables, 
		  voltage, 
		  wires, 
		  station_update,
		  CASE
			  WHEN ST_Distance( ST_EndPoint(way), ST_Centroid(station_update) ) < 
		 	 	   ST_Distance( ST_StartPoint(way), ST_Centroid(station_update) )
			  THEN ST_SetPoint(way, -1, ST_Centroid(station_update))
			  WHEN ST_Distance( ST_EndPoint(way), ST_Centroid(station_update) ) > 
		  	 	   ST_Distance( ST_StartPoint(way), ST_Centroid(station_update) )
			  THEN ST_SetPoint(way, 0, ST_Centroid(station_update))
		  END AS way
	FROM split_lines;
	
	-- Remove double counted lines 
    DELETE FROM power_lines
    WHERE power_lines.line_id IN (SELECT line_id FROM split_lines);
   
	-- Insert new lines into power_lines
	INSERT INTO power_lines (
	   			line_id, 
	   			power, 
	   			cables, 
	   			voltage, 
	   			wires, 
	   			station_update,
				way )
	SELECT * FROM split_lines_with_new_endpoints;
	
	-- Create new power_lines table of updated line_ids
	CREATE TABLE power_lines_updated AS
	SELECT ROW_NUMBER() OVER() AS new_line_id, * FROM power_lines;
	
	-- Dropping old power_lines table, renaming tables and columns
	DROP TABLE power_lines;
	
	ALTER TABLE power_lines_updated
	RENAME TO power_lines;
	
	ALTER TABLE power_lines
	DROP COLUMN line_id;
	
	ALTER TABLE power_lines
	RENAME new_line_id TO line_id;
	
	ALTER TABLE power_lines
	DROP COLUMN IF EXISTS station_update;
	
	-- Drop intermediary tables
	DROP TABLE subset_intersections_recalc;
	DROP TABLE split_lines;
	DROP TABLE split_lines_with_new_endpoints;
    RAISE NOTICE 'Iterations %', counter;
    counter := counter + 1;
    
	END LOOP;
END$$;	

-- Dropping temp tables
DROP TABLE intersections;



--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 8: Replacing endpoints of lines with station centroids where necessary (nearby stations)
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Create temp table where lines have START-points replaced with station centroid (when it's within 500m)
CREATE TABLE temp_table AS
SELECT L.line_id,
       L.power,
	   L.cables,
	   L.voltage, 
	   L.wires,
	   ST_SetPoint(L.way, 0, ST_Centroid(S.way)) as way
FROM power_lines L, power_stations S
WHERE ST_Distance(ST_StartPoint(L.way), S.way) < 0.0045045;

-- Remove the corresponding original lines from power_lines
DELETE FROM power_lines
WHERE power_lines.line_id IN (SELECT line_id FROM temp_table);

-- Insert updated lines from temp table
INSERT INTO power_lines (
	   					line_id, 
	   					power, 
	   					cables, 
	   					voltage, 
	   					wires, 
						way )
SELECT * FROM temp_table;

DROP TABLE temp_table;

-- Create temp table where lines have END-points replaced with station centroid (when it's within 500m)
CREATE TABLE temp_table AS
SELECT L.line_id,
       L.power,
	   L.cables,
	   L.voltage, 
	   L.wires,
	   ST_SetPoint(L.way, -1, ST_Centroid(S.way)) as way
FROM power_lines L, power_stations S
WHERE ST_Distance(ST_Endpoint(L.way), S.way) < 0.0045045;

-- Remove the corresponding original lines from power_lines
DELETE FROM power_lines
WHERE power_lines.line_id IN (SELECT line_id FROM temp_table);

-- Insert updated lines from temp table
INSERT INTO power_lines (
	   					line_id, 
	   					power, 
	   					cables, 
	   					voltage, 
	   					wires, 
						way )
SELECT * FROM temp_table;

-- Dropping temp_tables
DROP TABLE temp_table;



--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 9: Identifying line-station NEAR intersections and whether they occur at endpoints
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Find near intersections, line IDs, and corresponding station geometries
CREATE TABLE near_intersections AS
SELECT ROW_NUMBER() OVER() AS near_intersect_id,
	   line_id,
	   line,
	   station_id,
	   station,
	   endpoint
FROM ( SELECT  L.way AS line,
	   		   L.line_id, 
	           S.station_id,
	  		   S.way as station,
	  		   CASE
	  				WHEN ST_Intersects( ST_Buffer(ST_EndPoint(L.way), 0.0005, 'quad_segs=4'),  
									    ST_ClosestPoint( L.way, ST_Centroid(S.way) )
									  ) OR
	  					 ST_Intersects( ST_Buffer(ST_StartPoint(L.way), 0.0005, 'quad_segs=4'),  
									    ST_ClosestPoint( L.way, ST_Centroid(S.way) )
									  ) 
	  				THEN 1
	  				ELSE 0
	  		   END AS endpoint
	  	FROM power_lines L, power_stations S
	  	WHERE ST_Distance(L.way, S.way) <  0.0045045 
	  	AND NOT ST_Intersects(L.way, S.way)
	  )	AS near_intersections_no_rownum;		


--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 10: Splitting lines by NEAR intersections
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Splitting loop
DO $$
DECLARE
   counter integer := 0;
BEGIN
	WHILE EXISTS(SELECT 1 FROM near_intersections WHERE endpoint = 0) LOOP 
 
	-- Consider only a subset of the original set of intersections where endpoint = 0
	CREATE TABLE subset_near_intersections AS
	SELECT DISTINCT ON(line_id) * FROM near_intersections WHERE endpoint = 0;

	-- Denote endpoint = 1 in 'intersections' if that intersection is being dealt with in this iteration
	UPDATE near_intersections
	SET endpoint = 1 WHERE near_intersect_id IN 
	(SELECT near_intersect_id FROM subset_near_intersections);
	
	-- Using the stations in the subset, recalculate which new line IDs they intersect
	-- The 'endpoint=0' condition of subset_intersections implies that INTERSECTIONS already dealt with won't be considered
	-- The NOT ST_Intersects condition implies that FOR A GIVEN STATION, LINES already dealt with won't be considered
	CREATE TABLE subset_near_intersections_recalc AS
	SELECT L.line_id, 
		   L.way AS line,
		   I.station_id,
		   I.station
	FROM power_lines L, subset_near_intersections I
	WHERE ST_Distance(L.way, I.station) < 0.0045045 
	AND NOT ST_Intersects( ST_Buffer(ST_EndPoint(L.way), 0.0005, 'quad_segs=4'),  
						   ST_ClosestPoint( L.way, ST_Centroid(I.station) ) )
	AND NOT ST_Intersects( ST_Buffer(ST_StartPoint(L.way), 0.0005, 'quad_segs=4'),  
						   ST_ClosestPoint( L.way, ST_Centroid(I.station) ) );
  
	-- Create a column called 'station_update' in the lines table to store the station information
	ALTER TABLE power_lines
	ADD station_update geometry;
  
	-- Set the 'station_update' to the corresponding station in subset_intersections
	UPDATE power_lines
	SET station_update = subset_near_intersections_recalc.station
  	FROM subset_near_intersections_recalc
	WHERE power_lines.line_id = subset_near_intersections_recalc.line_id;

	-- Create a table for split_lines 
  	CREATE TABLE split_lines AS
 	SELECT L.line_id, 
	   	   L.power, 
	   	   L.cables, 
	   	   L.voltage, 
	   	   L.wires, 
	   	   (ST_Dump(ST_Difference( way, ST_Buffer( ST_ClosestPoint( way, ST_Centroid(station_update) ), 0.0005, 'quad_segs=4' ) ))).geom as way, 
		   L.station_update
  	FROM power_lines L
  	WHERE station_update IS NOT NULL;
	
	-- Replace the endpoints of lines with station centroids
	CREATE TABLE split_lines_with_new_endpoints AS
	SELECT line_id, 
	   	   power, 
		   cables, 
		   voltage, 
		   wires,  
		   station_update,
		   CASE
			   WHEN ST_Distance( ST_EndPoint(way), ST_Centroid(station_update) ) < 
		 	 	    ST_Distance( ST_StartPoint(way), ST_Centroid(station_update) )
			   THEN ST_SetPoint(way, -1, ST_Centroid(station_update))
			   WHEN ST_Distance( ST_EndPoint(way), ST_Centroid(station_update) ) > 
		  	 	    ST_Distance( ST_StartPoint(way), ST_Centroid(station_update) )
			   THEN ST_SetPoint(way, 0, ST_Centroid(station_update))
		   END AS way
	FROM split_lines;
	
	-- Remove double counted lines 
    DELETE FROM power_lines
    WHERE power_lines.line_id IN (SELECT line_id FROM split_lines);
   
	-- Insert new lines into power_lines
	INSERT INTO power_lines (
	   			line_id, 
	   			power, 
	   			cables, 
	   			voltage, 
	   			wires, 
	   			station_update,
				way )
	SELECT * FROM split_lines_with_new_endpoints;
	
	-- Create new power_lines table of updated line_ids
	CREATE TABLE power_lines_updated AS
	SELECT ROW_NUMBER() OVER() AS new_line_id, * FROM power_lines;
	
	-- Dropping old power_lines table, renaming tables and columns
	DROP TABLE power_lines;
	
	ALTER TABLE power_lines_updated
	RENAME TO power_lines;
	
	ALTER TABLE power_lines
	DROP COLUMN line_id;
	
	ALTER TABLE power_lines
	RENAME new_line_id TO line_id;
	
	ALTER TABLE power_lines
	DROP COLUMN IF EXISTS station_update;
	
	-- Drop intermediary tables
   	DROP TABLE subset_near_intersections;
	DROP TABLE subset_near_intersections_recalc;
	DROP TABLE split_lines;
	DROP TABLE split_lines_with_new_endpoints;
    RAISE NOTICE 'Iterations %', counter;
    counter := counter + 1;
    
	END LOOP;
END$$;	

-- Dropping temp tables
DROP TABLE near_intersections;






