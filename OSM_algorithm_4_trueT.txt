--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 12: Identify and clean T-intersections (eventually merging double t-intersections into one line)
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

CREATE TABLE t_intersections AS 
-- SEI stands for 'station endpoint indicators', SEI = 1 if the endpoint touches a station
WITH cte_power_lines_SEI AS
	(
	SELECT L.line_id,
		   L.power,
		   L.cables,
		   L.voltage,
		   L.wires,
		   L.way,
		   CASE
				WHEN ST_Intersects(ST_StartPoint(L.way), S.all_stations)
				THEN 1
				ELSE 0
		   END AS station_startpoint,
		   CASE
				WHEN ST_Intersects(ST_EndPoint(L.way), S.all_stations)
				THEN 1
				ELSE 0
		   END AS station_endpoint
	FROM power_lines L, (SELECT ST_Union(way) AS all_stations FROM power_stations) AS S
	)
-- Use the CTE to query T-intersections, where the endpoint-line is not at a station
SELECT ROW_NUMBER() OVER() AS intersection_id,
	   X.line_id AS x_id, 
	   X.power AS x_power,
	   X.cables AS x_cables,
	   X.voltage AS x_voltage,
	   X.wires AS x_wires,
	   X.way AS x_way,
	   Y.line_id AS y_id,
	   Y.power AS y_power,
	   Y.cables AS y_cables, 
	   Y.voltage AS y_voltage,
	   Y.wires AS y_wires,
	   Y.way AS y_way,
	   CASE
	 	  WHEN ST_Distance(ST_StartPoint(X.way), Y.way) < 0.0045045
		  THEN 0
		  WHEN ST_Distance(ST_EndPoint(X.way), Y.way) < 0.0045045
		  THEN -1
	   END AS x_line_start_or_end
FROM cte_power_lines_SEI X, cte_power_lines_SEI Y
WHERE X.line_id != Y.line_id
AND ST_Intersects(X.way, Y.way)
-- Condition: X doesn't intersect Y at Y's endpoint (because that would be a merge case)
AND NOT ST_Intersects(X.way, ST_StartPoint(Y.way))
AND NOT ST_Intersects(X.way, ST_EndPoint(Y.way))
-- Condition: Endpoint of Line X is close to Line Y (outside of endpoints)
-- Condition: Endpoint of Line X is not at a station
AND (
		(ST_Distance(ST_StartPoint(X.way), Y.way) < 0.0045045
		AND X.station_startpoint = 0)
 	OR  (ST_Distance(ST_EndPoint(X.way), Y.way) < 0.0045045
		AND X.station_endpoint = 0)
	);


-- Identifying mirrored pairs (lines that in theory t-intersect twice, which should actually be merged)
CREATE TABLE mirrored_t_intersections AS
SELECT X.intersection_id,
	   X.x_id, 
	   X.x_way,
	   X.y_id,
	   X.y_way,
	   ST_Intersection(X.x_way, X.y_way)
FROM t_intersections X
INNER JOIN t_intersections Y 
ON X.x_id = Y.y_id 
AND X.y_id = Y.x_id;


-- EXPL: The last cond. of t_intersects can be true symmetrically for two lines but only one intersection
-- EXPL: These are not true double-T-intersections (where 'ST_IsCollection' returns FALSE)
-- EXPL: The same intersection is just being recorded twice
-- Delete one of these intersections from 't_intersections'
DELETE FROM t_intersections 
WHERE intersection_id IN
	(
	SELECT MAX(intersection_id) FROM
		-- Identify which intersections are 'collections' of geometries and which are a single geometry
		(
		SELECT intersection_id,
		   	   ST_IsCollection(st_intersection),
			   CASE 
					WHEN x_id > y_id 
					THEN x_id
					ELSE y_id
		   	   END AS a_id,
		   	   CASE 
					WHEN x_id > y_id 
					THEN y_id
					ELSE x_id
		   	   END AS b_id
		FROM mirrored_t_intersections
		) AS true_ts
	WHERE st_iscollection = false
	GROUP BY a_id, b_id
	);

-- Delete both from 'mirrored_pairs'
DELETE FROM mirrored_t_intersections 
WHERE intersection_id IN
	(
	SELECT intersection_id FROM
		-- Identify which intersections are 'collections' of geometries and which are a single geometry
		(
		SELECT intersection_id,
		   	   ST_IsCollection(st_intersection)
		FROM mirrored_t_intersections
		) AS true_ts
	WHERE st_iscollection = false
	);

-- Delete those lines that t-intersect twice
DELETE FROM t_intersections
WHERE intersection_id IN
	(
	SELECT intersection_id FROM mirrored_t_intersections
	);

-- Identify and delete the shorter of two parallel lines from power_lines
DELETE FROM power_lines WHERE line_id IN
	(
	SELECT x_id
	FROM t_intersections
	WHERE ST_Distance(ST_StartPoint(x_way), y_way) < 0.0055
	AND ST_Distance(ST_EndPoint(x_way), y_way) < 0.0055
	AND ST_Length(x_way) < ST_Length(y_way)
	);

-- Delete any mirrored pair that included a short parallel line
DELETE FROM mirrored_t_intersections
WHERE intersection_id IN
	(
	SELECT intersection_id
	FROM t_intersections
	WHERE ST_Distance(ST_StartPoint(x_way), y_way) < 0.0055
	AND ST_Distance(ST_EndPoint(x_way), y_way) < 0.0055
	AND ST_Length(x_way) < ST_Length(y_way)
	);

-- Delete any intersections between lines that that are effectively parallel from t_intersections
DELETE FROM t_intersections
WHERE intersection_id IN
	(
	SELECT intersection_id
	FROM t_intersections
	WHERE ST_Distance(ST_StartPoint(x_way), y_way) < 0.0055
	AND ST_Distance(ST_EndPoint(x_way), y_way) < 0.0055
	AND ST_Length(x_way) < ST_Length(y_way)
	);



--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 13: Replace X-line endpoints of T-intersections
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------


-- Remove power lines that are about to be updated
DELETE FROM power_lines
WHERE power_lines.line_id IN 
	(SELECT x_id 
	 FROM t_intersections
	 WHERE x_line_start_or_end = 0);

-- For t-intersections where X intersects Y near X's startpoint, replace X's startpoint
-- EXPL: We want to replace X's startpoint using the intersection of X and Y, however there may be more than one
-- EXPL: Even though we removed mirrored-Ts from the list, ST_ClosestPoint and ST_Intersection might still be ambiguous
-- EXPL: Instead take the closest point on the intersection to X's startpoint
-- Insert X into power_lines
INSERT INTO power_lines (
	   		line_id,
			power, 
	   		cables, 
	   		voltage, 
	   		wires, 
			way )
SELECT x_id AS line_id,
	   x_power AS power,
	   x_cables AS cables,
	   x_voltage AS voltage,
	   x_wires AS wires,
	   ST_SetPoint(x_way, 0, ST_ClosestPoint(ST_Intersection(y_way, x_way), ST_StartPoint(x_way))) AS way
FROM t_intersections
WHERE x_line_start_or_end = 0;

-- Create a table of Xs with replaced END-points from power_lines
-- EXPL: Since START-points were already replaced, this accounts for those lines that need both replaced
CREATE TABLE lines_with_replaced_endpoints AS
SELECT L.line_id, 
	   L.power, 
	   L.cables, 
	   L.voltage, 
	   L.wires, 
	   ST_SetPoint(L.way, -1, ST_ClosestPoint(ST_Intersection(y_way, x_way), ST_EndPoint(x_way))) AS way
FROM power_lines L, t_intersections I
WHERE L.line_id = I.x_id
AND I.x_line_start_or_end = -1;

-- Remove power lines that are about to be updated
DELETE FROM power_lines
WHERE power_lines.line_id IN 
	(SELECT x_id 
	 FROM t_intersections 
	 WHERE x_line_start_or_end = -1);

-- For t-intersections where X intersects Y near X's endpoint, replace X's endpoint
-- Insert X into power_lines
-- This accounts for those X's where startpoints also needed replacing (because they were replaced already and inserted)
INSERT INTO power_lines (
	   		line_id,
			power, 
	   		cables, 
	   		voltage, 
	   		wires, 
			way )
SELECT * FROM lines_with_replaced_endpoints;

-- Dropping temp tables
DROP TABLE lines_with_replaced_endpoints;



--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 14: Merging double-T-intersecting lines
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Identifying mirrored pairs (lines that t-intersect twice, which should actually be merged)
CREATE TABLE mirrored_t_intersections_pieces AS
SELECT X.intersection_id,
	   X.x_id,
	   Y.power AS x_power,
	   Y.cables AS x_cables,
	   Y.voltage AS x_voltage,
	   Y.wires AS x_wires,
	   Y.way AS x_way,
	   X.y_id,
	   Z.power AS y_power,
	   Z.cables AS y_cables,
	   Z.voltage AS y_voltage,
	   Z.wires AS y_wires,
	   Z.way AS y_way,
	   (ST_Dump(ST_Difference(Y.way, Z.way))).geom AS line_piece,
	   ST_Length((ST_Dump(ST_Difference(Y.way, Z.way))).geom) AS line_piece_length
FROM mirrored_t_intersections X
LEFT JOIN power_lines Y ON X.x_id = Y.line_id
LEFT JOIN power_lines Z ON X.y_id = Z.line_id;


-- POTENTIALBUG: Longest piece may not work if the longest piece is in the middle and the shorter piece connects to a station
-- For each X line, select the longest piece after the split
CREATE TABLE split_mirrored_t_intersections AS
SELECT intersection_id,
	   x_id,
	   x_power,
	   x_cables,
	   x_voltage,
	   x_wires,
	   line_piece AS x_way,
	   y_id,
	   y_power,
	   y_cables,
	   y_voltage,
	   y_wires
FROM mirrored_t_intersections_pieces
WHERE line_piece_length IN
(
SELECT MAX(line_piece_length) 
FROM mirrored_t_intersections_pieces
GROUP BY intersection_id
);


-- Create the table for merging lines using connecting lines between split pieces
CREATE TABLE line2line_near_intersections AS
-- CTE provides a final geometry for each line
-- It consolidates those lines that have been edited multiple times by taking the intersection of the edits
WITH cte_unique_lines AS 
	(
	-- FIRST HALF: Non-duplicate x_ids
	SELECT intersection_id, 
		   x_id, 
		   x_way
	FROM split_mirrored_t_intersections
	WHERE x_id IN
		(
		SELECT x_id FROM split_mirrored_t_intersections
		-- X and Y are mirrored pairs so we can consider duplicate x_ids WLOG (implies duplicate y_ids)
		GROUP BY x_id HAVING COUNT(*) = 1
		)
	UNION
	-- SECOND HALF: Duplicate x_ids (where we take the intersection of the edited lines with same id)
	SELECT X.intersection_id, 
		   X.x_id,
		   ST_Intersection(X.x_way, Y.x_way) as x_way
	FROM split_mirrored_t_intersections X, split_mirrored_t_intersections Y
	WHERE X.x_id = Y.x_id
	AND X.intersection_id > Y.intersection_id
	)
SELECT X.intersection_id, 
	   X.x_id,
	   X.x_power,
	   X.x_cables,
	   X.x_voltage,
	   X.x_wires,
	   Y.x_way, 
	   X.y_id,
	   X.y_power,
	   X.y_cables,
	   X.y_voltage,
	   X.y_wires,
	   Z.x_way AS y_way,
	   -- Identifies both endpoints and selects the endpoint closest to the other line
	   ST_MakeLine(
		   		   ST_ClosestPoint(
					  			  ST_Union(
								 		  ST_Endpoint(ST_LineMerge(Y.x_way)), 
								 		  ST_Startpoint(ST_LineMerge(Y.x_way))
										  ), 
					  			  Z.x_way
				   				  ),
		   		   ST_ClosestPoint(
					  			  ST_Union(
									 	  ST_Endpoint(Z.x_way), 
									 	  ST_Startpoint(Z.x_way)), 
					  			  Y.x_way
				  				  )
	   			  ) AS z_way
FROM split_mirrored_t_intersections X
LEFT JOIN cte_unique_lines Y ON X.x_id = Y.x_id
LEFT JOIN cte_unique_lines Z ON X.y_id = Z.x_id
WHERE X.x_id > X.y_id;


-- Create power, cables, voltage and wires columns for the connecting lines
ALTER TABLE line2line_near_intersections
ADD COLUMN z_power text,
ADD COLUMN z_cables text,
ADD COLUMN z_voltage text,
ADD COLUMN z_wires text;

-- 
CREATE TABLE line_groups AS 
-- START of CTE
WITH RECURSIVE cte_line_intersections AS
	(
	SELECT x_id, 
		   x_power,
		   x_cables,
		   x_voltage,
		   x_wires,
		   x_way,
		   z_power,
		   z_cables,
		   z_voltage,
		   z_wires,
		   z_way,
		   y_id, 
		   y_power,
		   y_cables,
		   y_voltage,
		   y_wires,
		   y_way,
		   1 AS level
	FROM line2line_near_intersections I
	UNION ALL
		SELECT I.x_id, 
			   I.x_power,
			   I.x_cables,
			   I.x_voltage,
			   I.x_wires,
			   I.x_way,
			   I.z_power,
			   I.z_cables,
			   I.z_voltage,
			   I.z_wires,
			   I.z_way,
			   cte_line_intersections.y_id, 
			   cte_line_intersections.y_power,
			   cte_line_intersections.y_cables,
			   cte_line_intersections.y_voltage,
			   cte_line_intersections.y_wires,
			   cte_line_intersections.y_way, 
			   cte_line_intersections.level + 1
		FROM line2line_near_intersections I 
		JOIN cte_line_intersections ON I.y_id = cte_line_intersections.x_id
	)
-- END of CTE
SELECT x_id, 
	   x_power,
	   x_cables,
	   x_voltage,
	   x_wires,
	   x_way,
	   z_power,
	   z_cables,
	   z_voltage,
	   z_wires,
	   z_way,
	   y_id,
	   y_power,
	   y_cables,
	   y_voltage,
	   y_wires,
	   y_way,
       DENSE_RANK() OVER(ORDER BY merge_number) AS group_number
FROM (SELECT x_id, 
	  		 x_power,
	   		 x_cables,
	   		 x_voltage,
	   		 x_wires,
	   		 x_way,
	  		 z_power,
	   		 z_cables,
	   		 z_voltage,
	   		 z_wires,
	   		 z_way,
	  		 y_id,
	 		 y_power,
	   		 y_cables,
	   		 y_voltage,
	   		 y_wires,
	   		 y_way,
             LEAST(MIN(y_id) OVER(PARTITION BY x_id), MIN(x_id) OVER(PARTITION BY y_id)) AS merge_number,
             level
      FROM cte_line_intersections
     ) line2line_near_intersections
WHERE level = 1;

-- Remove the merged lines from power_lines by ID
DELETE FROM power_lines
WHERE power_lines.line_id IN (SELECT x_id FROM line2line_near_intersections)
OR power_lines.line_id IN (SELECT y_id FROM line2line_near_intersections);

-- Remove line_id column
ALTER TABLE power_lines
DROP COLUMN line_id;

-- Insert new lines into power_lines
INSERT INTO power_lines (
	   		power, 
	   		cables, 
	   		voltage, 
	   		wires, 
			way )
SELECT * FROM 
	(
	 SELECT STRING_AGG(power, ',') AS power,
	       	STRING_AGG(cables, ',') AS cables,
	        STRING_AGG(voltage, ',') AS voltage,
	        STRING_AGG(wires, ',') AS wires,
	        ST_LineMerge(ST_Union(way)) AS way
	 FROM (
			SELECT DISTINCT x_power AS power,
	   		 				x_cables AS cables,
	   		 				x_voltage AS voltage,
	   		 				x_wires AS wires,
							x_way AS way,
							group_number
		    FROM line_groups
		 	UNION
			SELECT DISTINCT z_power AS power,
	   		 				z_cables AS cables,
	   		 				z_voltage AS voltage,
	   		 				z_wires AS wires,
							z_way AS way,
							group_number
			FROM line_groups
		 	UNION
			SELECT DISTINCT y_power AS power,
	   		 				y_cables AS cables,
	   		 				y_voltage AS voltage,
	   		 				y_wires AS wires,
							y_way AS way,
							group_number
			FROM line_groups
		  ) AS line_groups_reshape
	 GROUP BY group_number
	) AS merged_lines;

-- Create new power_lines table of updated line_ids
CREATE TABLE power_lines_updated AS
SELECT ROW_NUMBER() OVER() AS new_line_id, * FROM power_lines;
	
-- Dropping old power_lines table, renaming tables and columns
DROP TABLE power_lines;
	
ALTER TABLE power_lines_updated
RENAME TO power_lines;
	
ALTER TABLE power_lines
RENAME new_line_id TO line_id;


-- Dropping temp tables
DROP TABLE mirrored_t_intersections;
DROP TABLE mirrored_t_intersections_pieces;
DROP TABLE split_mirrored_t_intersections;
DROP TABLE line2line_near_intersections;
DROP TABLE line_groups;

