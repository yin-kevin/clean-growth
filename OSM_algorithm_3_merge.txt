--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

/* 
AUTHOR: Kevin Yin
DATE: Oct. 6, 2021

This file contains PostgreSQL code to clean and abstract power line and station data from 
OpenStreetMap that has already been filtered using Osmosis and exported to a PostgreSQL database. 
Inside the database should be the 'planet_osm_line', 'planet_osm_polygon', 'planet_osm_point tables' 
for the following queries to run. The outputs are the 'links', 'vertices' and 'intersections' .csv tables, which
describe power lines, stations, and their intersections respectively.
*/


--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
/*
STEP 11: Merging intersecting lines
*/
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

-- Drop lines that have nearly 0 distance, they are usually inside stations
-- These lines create a problem for the intersect-not-in-station condition
DELETE FROM power_lines
WHERE ST_Length(way) < 0.0001;
-- Drop lines that are just loops
DELETE FROM power_lines
WHERE ST_Intersects(ST_EndPoint(way), ST_StartPoint(way));

-- Drop duplicate/touching parallel lines, which are defined as having an intersection of certain length
CREATE TABLE long_intersections AS 
-- Identify all lines that intersect first
WITH cte_lines_that_intersect AS
	(
	SELECT DISTINCT X.line_id AS x_id, 
					X.power AS x_power,
					X.cables AS x_cables,
					X.voltage AS x_voltage,
					X.wires AS x_wires,
					X.way AS x_way,
					Y.line_id AS y_id,
					Y.power AS y_power,
					Y.cables AS y_cables,
					Y.voltage AS y_voltage,
					Y.wires AS y_wires,
					Y.way AS y_way,
					ST_Buffer(ST_Intersection(X.way, Y.way), 0.002) AS intersection
	FROM power_lines X, power_lines Y
	WHERE X.line_id != Y.line_id
	AND X.line_id > Y.line_id
	AND (
		ST_Intersects(ST_EndPoint(X.way), ST_EndPoint(Y.way))
		OR ST_Intersects(ST_StartPoint(X.way), ST_StartPoint(Y.way))
		OR ST_Intersects(ST_EndPoint(X.way), ST_StartPoint(Y.way))
		OR ST_Intersects(ST_StartPoint(X.way), ST_EndPoint(Y.way))
		)
	)
-- Select the ones that have "long" intersections (since the int. are 3D, use Perimeter)
SELECT intersection FROM cte_lines_that_intersect I
WHERE ST_Perimeter(intersection) > 0.1;

-- Create a table with the unions of all long-intersections and IDs
CREATE TABLE long_unions AS 
-- Collect the long-intersections in unions
WITH long_unions AS
	(
	SELECT (ST_Dump(ST_Union(intersection))).geom
	FROM long_intersections
	)
-- Create IDs for each union
SELECT ROW_NUMBER() OVER() AS intersection_id, * 
FROM long_unions;
-- Note: While only a rare edge case, this does not deal with the possibility of intersections that should be separate but are unioned at a station

-- Find lines that overlap and choose all but the longest to delete
CREATE TABLE deleted_lines AS
WITH all_overlaps AS
	(
	SELECT X.line_id, 
		   X.way, 
		   Y.intersection_id,
		   ST_Intersection(X.way, Y.geom) AS overlap,
		   ST_Length(ST_Intersection(X.way, Y.geom)) AS length_overlap
	FROM power_lines X, long_unions Y
	WHERE ST_Intersects(X.way, Y.geom)
	)
SELECT line_id FROM all_overlaps 
WHERE line_id NOT IN 
	(
	-- Finding the longest lines to save in each overlap
	SELECT DISTINCT ON (intersection_id) line_id FROM all_overlaps
	ORDER BY intersection_id, length_overlap DESC
	);

-- Delete problematic lines
DELETE FROM power_lines 
WHERE line_id IN (SELECT line_id FROM deleted_lines);

-- Query lines whose endpoints touch outside of a station
CREATE TABLE line2line_intersections AS
-- Identify all lines that intersect first
WITH cte_lines_that_intersect AS
	(
	SELECT DISTINCT X.line_id AS x_id, 
					X.power AS x_power,
					X.cables AS x_cables,
					X.voltage AS x_voltage,
					X.wires AS x_wires,
					X.way AS x_way,
					Y.line_id AS y_id,
					Y.power AS y_power,
					Y.cables AS y_cables,
					Y.voltage AS y_voltage,
					Y.wires AS y_wires,
					Y.way AS y_way,
					ST_Buffer(ST_Intersection(X.way, Y.way), 0.002) AS intersection
	FROM power_lines X, power_lines Y
	WHERE X.line_id != Y.line_id
	AND X.line_id > Y.line_id
	AND (
		ST_Intersects(ST_EndPoint(X.way), ST_EndPoint(Y.way))
		OR ST_Intersects(ST_StartPoint(X.way), ST_StartPoint(Y.way))
		OR ST_Intersects(ST_EndPoint(X.way), ST_StartPoint(Y.way))
		OR ST_Intersects(ST_StartPoint(X.way), ST_EndPoint(Y.way))
		)
	)
-- Select only the ones that intersect outside of stations
SELECT DISTINCT I.x_id, 
				I.x_power,
				I.x_cables,
				I.x_voltage,
				I.x_wires,
				I.x_way, 
				I.y_id, 
				I.y_power,
				I.y_cables,
				I.y_voltage,
				I.y_wires,
				I.y_way 
FROM cte_lines_that_intersect I, 
	 (SELECT ST_Union(way) AS all_stations FROM power_stations) AS S,
	 bounding_box B
WHERE NOT ST_Intersects(I.intersection, S.all_stations)
AND ST_Length(I.intersection) < 0.005
AND ST_Intersects(I.intersection, B.polygon);


-- Identify groups of lines that intersect directly and indirectly (transitive intersection)
-- ie. If A connects to B and B connects to C, group A, B, and C together
CREATE TABLE line_groups AS 
WITH RECURSIVE cte_line_intersections AS
	(
	SELECT x_id, 
		   x_power,
		   x_cables,
		   x_voltage,
		   x_wires,
		   x_way,
		   y_id, 
		   y_power,
		   y_cables,
		   y_voltage,
		   y_wires,
		   y_way,
		   1 AS level
	FROM line2line_intersections I
	UNION ALL
		SELECT I.x_id, 
			   I.x_power,
			   I.x_cables,
			   I.x_voltage,
			   I.x_wires,
			   I.x_way,
			   cte_line_intersections.y_id, 
			   cte_line_intersections.y_power,
			   cte_line_intersections.y_cables,
			   cte_line_intersections.y_voltage,
			   cte_line_intersections.y_wires,
			   cte_line_intersections.y_way, 
			   cte_line_intersections.level + 1
		FROM line2line_intersections I 
		JOIN cte_line_intersections ON I.y_id = cte_line_intersections.x_id
	)
SELECT x_id, 
	   x_power,
	   x_cables,
	   x_voltage,
	   x_wires,
	   x_way,
	   y_id,
	   y_power,
	   y_cables,
	   y_voltage,
	   y_wires,
	   y_way,
       DENSE_RANK() OVER(ORDER BY merge_number) AS group_number
FROM (SELECT x_id, 
	  		 x_power,
	   		 x_cables,
	   		 x_voltage,
	   		 x_wires,
	   		 x_way,
	  		 y_id,
	 		 y_power,
	   		 y_cables,
	   		 y_voltage,
	   		 y_wires,
	   		 y_way,
             LEAST(MIN(y_id) OVER(PARTITION BY x_id), MIN(x_id) OVER(PARTITION BY y_id)) AS merge_number,
             level
      FROM cte_line_intersections
     ) line2line_intersections
WHERE level = 1;


-- Remove the merged lines from power_lines by ID
DELETE FROM power_lines
WHERE power_lines.line_id IN (SELECT x_id FROM line2line_intersections)
OR power_lines.line_id IN (SELECT y_id FROM line2line_intersections);

-- Remove line_id column
ALTER TABLE power_lines
DROP COLUMN line_id;

-- Insert new lines into power_lines
INSERT INTO power_lines (
	   		power, 
	   		cables, 
	   		voltage, 
	   		wires, 
			way )
SELECT * FROM 
	(
	 SELECT STRING_AGG(power, ',') AS power,
	       	STRING_AGG(cables, ',') AS cables,
	        STRING_AGG(voltage, ',') AS voltage,
	        STRING_AGG(wires, ',') AS wires,
	        ST_LineMerge(ST_Union(way)) AS way
	 FROM (
			SELECT DISTINCT x_power AS power,
	   		 				x_cables AS cables,
	   		 				x_voltage AS voltage,
	   		 				x_wires AS wires,
							x_way AS way,
							group_number
			FROM line_groups
			UNION
			SELECT DISTINCT y_power AS power,
	   		 				y_cables AS cables,
	   		 				y_voltage AS voltage,
	   		 				y_wires AS wires,
							y_way AS way,
							group_number
			FROM line_groups
		  ) AS line_groups_reshape
	 GROUP BY group_number
	) AS merged_lines;

-- Create new power_lines table of updated line_ids
CREATE TABLE power_lines_updated AS
SELECT ROW_NUMBER() OVER() AS new_line_id, * FROM power_lines;
	
-- Dropping old power_lines table, renaming tables and columns
DROP TABLE power_lines;
	
ALTER TABLE power_lines_updated
RENAME TO power_lines;
	
ALTER TABLE power_lines
RENAME new_line_id TO line_id;

-- Drop temp tables
DROP TABLE long_intersections;
DROP TABLE long_unions;
DROP TABLE deleted_lines;
DROP TABLE line_groups;
DROP TABLE line2line_intersections;



